{"version":3,"sources":["infinite-scroll.min.js"],"names":["root","factory","define","amd","exports","module","infiniteScroll","this","config","currentPage","nextUrl","$","nextSelector","attr","finished","loader","loaderService","parserService","itemSelector","waitForImages","position","positionService","threshold","autoLoad","service","load","emit","afterLoad","data","items","page","start","deferred","Deferred","resolve","promise","then","watch","stop","stopWatching","Emitter","parse","url","ajax","parsedData","imagesReady","find","callback","watching","onScroll","valid","window","innerHeight","pageYOffset","document","body","scrollHeight","removeEventListener","addEventListener"],"mappings":"CAAE,SAASA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IACzCD,UAAWD,GACiB,gBAAZG,SAChBC,OAAOD,QAAUH,IAEjBD,EAAKM,eAAiBL,KAExBM,KAAM,WACR,YAoBA,SAASD,GAAeE,GAKtB,GAAIC,GAAc,EAMdC,EAAUC,EAAEH,EAAOI,cAAcC,KAAK,QAMtCC,GAAYJ,EAMZK,EAASC,EACXC,EAAcT,EAAOU,aAAcV,EAAOI,cAC1CJ,EAAOW,eAaLC,EAAWC,EAAgBb,EAAOc,UAAW,WAC3Cd,EAAOe,YAAa,EACtBC,EAAQC,OAGRD,EAAQE,KAAK,gBAQbC,EAAY,SAASC,GAClBA,EAAKlB,SAKRD,IACAC,EAAUkB,EAAKlB,UALfI,GAAW,EACXU,EAAQE,KAAK,aAOfF,EAAQE,KAAK,YAAaG,MAAOD,EAAKC,MAAOC,KAAMrB,GAAc,WAC/De,EAAQO,WAMRP,GAKFV,SAAW,WACT,MAAOA,IAOTJ,QAAU,WACR,MAAOA,IAOTe,KAAO,WACL,GAAKX,EAOA,CACH,GAAIkB,GAAW,GAAIrB,GAAEsB,QAErB,OADAD,GAASE,UACFF,EAASG,UAPhB,MAFAX,GAAQE,KAAK,cAENX,EACJU,KAAKf,GACL0B,KAAKT,IAaZI,MAAQ,WACDjB,GACHM,EAASiB,SAQbC,KAAO,WACLlB,EAASmB,gBAcb,OAPAC,UACE,aACA,aACA,WACA,YAAahB,GAGRA,EAaT,QAASR,GAAcyB,EAAOtB,GAC5B,OAMEM,KAAO,SAASiB,GACd,MAAO/B,GAAEgC,MAAMD,IAAKA,IAAMN,KAAK,SAASR,GACtC,GAAIgB,GAAaH,EAAMb,EAEvB,OAAIT,GACKyB,EAAWf,MAAMgB,cAAcT,KAAK,WACzC,MAAOQ,KAIFA,MAiBjB,QAAS3B,GAAcC,EAAcN,GACnC,MAAO,UAASgB,GAGd,MAFAA,GAAOjB,EAAE,QAAUiB,EAAO,WAGxBC,MAAOD,EAAKkB,KAAK5B,GACjBR,QAASkB,EAAKkB,KAAKlC,GAAcC,KAAK,UAoB5C,QAASQ,GAAgBC,EAAWyB,GAGlC,GAAIC,IAAW,EAGXxB,GAKFyB,SAAW,WACLzB,EAAQ0B,UACV1B,EAAQe,eACRQ,MAUJG,MAAQ,WACN,MAAOC,QAAOC,YAAcD,OAAOE,aAAeC,SAASC,KAAKC,aAAelC,GAOjFiB,aAAe,WACTS,IACFA,GAAW,EACXG,OAAOM,oBAAoB,SAAUjC,EAAQyB,YAQjDZ,MAAQ,WACDW,IACCxB,EAAQ0B,QACVH,KAGAC,GAAW,EACXG,OAAOO,iBAAiB,SAAUlC,EAAQyB,aAShDD,SAAW,WACT,MAAOA,IAMX,OAAOxB,GAIT,MAAOlB","file":"infinite-scroll.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.infiniteScroll = factory();\n  }\n}(this, function() {\n'use strict';\n\n\n/**\n * @name infiniteScroll\n *\n * @param {{}}      config\n * @param {boolean} [config.autoLoad]\n * @param {string}  config.itemSelector\n * @param {string}  config.nextSelector\n * @param {number}  config.threshold\n * @param {boolean} [config.waitForImages]\n *\n * @returns {{\n *   load: Function,\n *   start: Function,\n *   stop: Function\n * }}\n *\n */\nfunction infiniteScroll(config) {\n\n  /**\n   * @type {number}\n   */\n  var currentPage = 1;\n\n\n  /**\n   * @type {string|undefined}\n   */\n  var nextUrl = $(config.nextSelector).attr('href');\n\n\n  /**\n   * @type {boolean}\n   */\n  var finished = !nextUrl;\n\n\n  /**\n   * @type {{load: function(url:string)}}\n   */\n  var loader = loaderService(\n    parserService(config.itemSelector, config.nextSelector),\n    config.waitForImages\n  );\n\n\n  /**\n   * @type {{\n   *   onScroll: Function,\n   *   valid: Function,\n   *   stopWatching: Function,\n   *   watch: Function,\n   *   watching: Function\n   * }}\n   */\n  var position = positionService(config.threshold, function(){\n    if (config.autoLoad !== false) {\n      service.load();\n    }\n    else {\n      service.emit('load:ready');\n    }\n  });\n\n\n  /**\n   * @param {{items:jQuery, nextUrl:string}} data\n   */\n  var afterLoad = function(data) {\n    if (!data.nextUrl) {\n      finished = true;\n      service.emit('finished');\n    }\n    else {\n      currentPage++;\n      nextUrl = data.nextUrl;\n    }\n\n    service.emit('load:end', {items: data.items, page: currentPage}, function(){\n      service.start();\n    });\n  };\n\n\n\n  var service = {\n\n    /**\n     * @returns {boolean}\n     */\n    finished : function() {\n      return finished;\n    },\n\n\n    /**\n     * @returns {string|undefined}\n     */\n    nextUrl : function() {\n      return nextUrl;\n    },\n\n\n    /**\n     * @returns {Promise}\n     */\n    load : function() {\n      if (!finished) {\n        service.emit('load:start');\n\n        return loader\n          .load(nextUrl)\n          .then(afterLoad);\n      }\n      else {\n        var deferred = new $.Deferred();\n        deferred.resolve();\n        return deferred.promise();\n      }\n    },\n\n\n    /**\n     * Start infinite scroll process.\n     */\n    start : function() {\n      if (!finished) {\n        position.watch();\n      }\n    },\n\n\n    /**\n     * Stop infinite scroll process.\n     */\n    stop : function() {\n      position.stopWatching();\n    }\n\n  };\n\n\n  // Extend `service` with event emitter\n  Emitter([\n    'load:ready',\n    'load:start',\n    'load:end',\n    'finished'], service);\n\n\n  return service;\n\n}\n\n/**\n * @name loader\n *\n * @param {function(data:string)} parse\n * @param {boolean} waitForImages\n *\n * @returns {{load: Function}}\n *\n */\nfunction loaderService(parse, waitForImages) {\n  return {\n\n    /**\n     * @param {string} url\n     * @returns {Promise}\n     */\n    load : function(url) {\n      return $.ajax({url: url}).then(function(data){\n        var parsedData = parse(data);\n\n        if (waitForImages) {\n          return parsedData.items.imagesReady().then(function(){\n            return parsedData;\n          });\n        }\n        else {\n          return parsedData;\n        }\n      });\n    }\n\n  };\n}\n\n/**\n * @name parser\n *\n * @param {string} itemSelector\n * @param {string} nextSelector\n *\n * @returns {function(data:string)}\n *\n */\nfunction parserService(itemSelector, nextSelector) {\n  return function(data) {\n    data = $('<div>' + data + '</div>');\n\n    return {\n      items: data.find(itemSelector),\n      nextUrl: data.find(nextSelector).attr('href')\n    };\n  };\n}\n\n/**\n * @name position\n *\n * @param {number} threshold\n * @param {Function} callback\n *\n * @returns {{\n *   onScroll: Function,\n *   valid: Function,\n *   stopWatching: Function,\n *   watch: Function,\n *   watching: Function\n * }}\n *\n */\nfunction positionService(threshold, callback) {\n\n  // @type boolean\n  var watching = false;\n\n\n  var service = {\n\n    /**\n     * Listener function to be bound to `scroll` event.\n     */\n    onScroll : function() {\n      if (service.valid()) {\n        service.stopWatching();\n        callback();\n      }\n    },\n\n\n    /**\n     * Calculates scroll position, returning `true` if\n     * position has crossed `threshold`.\n     * @returns {boolean}\n     */\n    valid : function() {\n      return window.innerHeight + window.pageYOffset >= document.body.scrollHeight - threshold;\n    },\n\n\n    /**\n     * Stop watching scroll position.\n     */\n    stopWatching : function() {\n      if (watching) {\n        watching = false;\n        window.removeEventListener('scroll', service.onScroll);\n      }\n    },\n\n\n    /**\n     * Start watching scroll position.\n     */\n    watch : function() {\n      if (!watching) {\n        if (service.valid()) {\n          callback();\n        }\n        else {\n          watching = true;\n          window.addEventListener('scroll', service.onScroll);\n        }\n      }\n    },\n\n\n    /**\n     * @returns {boolean}\n     */\n    watching : function() {\n      return watching;\n    }\n\n  };\n\n\n  return service;\n\n}\n\nreturn infiniteScroll;\n}));\n"],"sourceRoot":"/source/"}