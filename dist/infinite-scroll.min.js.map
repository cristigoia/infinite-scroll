{"version":3,"sources":["infinite-scroll.min.js"],"names":["root","factory","define","amd","exports","module","InfiniteScroll","this","options","eventEmitter","autoLoad","currentPage","finished","itemSelector","item","paginationSelector","pagination","requestConfig","context","dataType","url","$","attr","waitForImages","watcher","Watcher","buffer","scrollBuffer","callback","load","bind","watching","listener","validate","stop","prototype","emit","ajax","then","data","$data","$items","find","$pagination","updatePagination","imagesReady","postLoad","items","page","that","start","length","window","addEventListener","removeEventListener","innerHeight","pageYOffset","document","body","scrollHeight"],"mappings":"CAAE,SAASA,EAAMC,GACO,kBAAXC,SAAyBA,OAAOC,IACzCD,UAAWD,GACiB,gBAAZG,SAChBC,OAAOD,QAAUH,IAEjBD,EAAKM,eAAiBL,KAExBM,KAAM,WACR,YAeA,SAASD,GAAeE,GAEtBC,cAAc,aAAc,YAAaF,MAEzCA,KAAKG,SAAWF,EAAQE,YAAa,EAErCH,KAAKI,YAAc,EAEnBJ,KAAKK,UAAW,EAEhBL,KAAKM,aAAeL,EAAQM,KAE5BP,KAAKQ,mBAAqBP,EAAQQ,WAElCT,KAAKU,eACHC,QAASX,KACTY,SAAU,OACVC,IAAKC,EAAEd,KAAKQ,oBAAoBO,KAAK,SAGvCf,KAAKgB,gBAAkBf,EAAQe,cAG/BhB,KAAKiB,QAAU,GAAIC,IACjBC,OAAQlB,EAAQmB,aAChBC,SAAU,WACJrB,KAAKG,UAAUH,KAAKsB,QACxBC,KAAKvB,QA6FX,QAASkB,GAAQjB,GACfD,KAAKmB,OAASlB,EAAQkB,QAAU,IAChCnB,KAAKqB,SAAWpB,EAAQoB,SACxBrB,KAAKwB,UAAW,EAEhBxB,KAAKyB,SAAW,WACVzB,KAAK0B,aACP1B,KAAK2B,OACL3B,KAAKqB,aAEPE,KAAKvB,MAwCT,MAzIAD,GAAe6B,WAKbN,KAAO,WACL,MAAItB,MAAKK,SAAT,QAEAL,KAAK6B,KAAK,cAEHf,EAAEgB,KAAK9B,KAAKU,eAChBqB,KAAK,SAASC,GACb,GAAIC,GAAQnB,EAAE,QAAUkB,EAAO,UAC3BE,EAASD,EAAME,KAAKnC,KAAKM,cACzB8B,EAAcH,EAAME,KAAKnC,KAAKQ,mBAElCyB,GAAQ,KAERjC,KAAKqC,iBAAiBD,GAElBpC,KAAKgB,cACPkB,EAAOI,cACJP,KAAK/B,KAAKuC,SAAShB,KAAKvB,OAG3BA,KAAKuC,SAASL,OAStBK,SAAW,SAASC,GAClB,GAAIR,IAAQQ,MAAOA,EAAOC,KAAMzC,KAAKI,aACjCsC,EAAO1C,IAEXA,MAAK6B,KAAK,WAAYG,EAAM,WAC1BU,EAAKC,WAQTA,MAAQ,WACD3C,KAAKK,UACRL,KAAKiB,QAAQ0B,SAQjBhB,KAAO,WACL3B,KAAKiB,QAAQU,QAOfU,iBAAmB,SAAS5B,GAC1BT,KAAKI,cAEDK,EAAWmC,OACb5C,KAAKU,cAAcG,IAAMJ,EAAWM,KAAK,QAGzCf,KAAKK,UAAW,IA6BtBa,EAAQU,WAKNe,MAAQ,WACF3C,KAAKwB,WAELxB,KAAK0B,WACP1B,KAAKqB,YAGLrB,KAAKwB,UAAW,EAChBqB,OAAOC,iBAAiB,SAAU9C,KAAKyB,aAQ3CE,KAAO,WACLkB,OAAOE,oBAAoB,SAAU/C,KAAKyB,UAC1CzB,KAAKwB,UAAW,GAOlBE,SAAW,WACT,MAAOmB,QAAOG,YAAcH,OAAOI,aAAeC,SAASC,KAAKC,aAAepD,KAAKmB,SAKjFpB","file":"infinite-scroll.min.js","sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.InfiniteScroll = factory();\n  }\n}(this, function() {\n'use strict';\n\n\n/**\n * @name InfiniteScroll\n * @constructor\n *\n * @param {{}}      options\n * @param {boolean} [options.autoLoad=true]\n * @param {string}  options.item\n * @param {string}  options.pagination\n * @param {number}  [options.scrollBuffer=150]\n * @param {boolean} [options.waitForImages=false]\n *\n */\nfunction InfiniteScroll(options) {\n\n  eventEmitter(['load:start', 'load:end'], this);\n\n  this.autoLoad = options.autoLoad !== false;\n\n  this.currentPage = 1;\n\n  this.finished = false;\n\n  this.itemSelector = options.item;\n\n  this.paginationSelector = options.pagination;\n\n  this.requestConfig = {\n    context: this,\n    dataType: 'html',\n    url: $(this.paginationSelector).attr('href')\n  };\n\n  this.waitForImages = !!options.waitForImages;\n\n  // TODO: need to emit when autoLoad is false\n  this.watcher = new Watcher({\n    buffer: options.scrollBuffer,\n    callback: function(){\n      if (this.autoLoad) this.load();\n    }.bind(this)\n  });\n\n}\n\n\nInfiniteScroll.prototype = {\n\n  /**\n   * @returns {Promise}\n   */\n  load : function() {\n    if (this.finished) return;\n\n    this.emit('load:start');\n\n    return $.ajax(this.requestConfig)\n      .then(function(data){\n        var $data = $('<div>' + data + '</div>'),\n            $items = $data.find(this.itemSelector),\n            $pagination = $data.find(this.paginationSelector);\n\n        $data = null;\n\n        this.updatePagination($pagination);\n\n        if (this.waitForImages) {\n          $items.imagesReady()\n            .then(this.postLoad.bind(this));\n        }\n        else {\n          this.postLoad($items);\n        }\n      });\n  },\n\n\n  /**\n   * @param {jQuery} items\n   */\n  postLoad : function(items) {\n    var data = {items: items, page: this.currentPage},\n        that = this;\n\n    this.emit('load:end', data, function(){\n      that.start();\n    });\n  },\n\n\n  /**\n   *\n   */\n  start : function() {\n    if (!this.finished) {\n      this.watcher.start();\n    }\n  },\n\n\n  /**\n   *\n   */\n  stop : function() {\n    this.watcher.stop();\n  },\n\n\n  /**\n   * @param {jQuery} pagination\n   */\n  updatePagination : function(pagination) {\n    this.currentPage++;\n\n    if (pagination.length) {\n      this.requestConfig.url = pagination.attr('href');\n    }\n    else {\n      this.finished = true;\n    }\n  }\n\n};\n\n/**\n * @name Watcher\n * @constructor\n *\n * @param {{}}       options\n * @param {number}   [options.buffer=150]\n * @param {Function} options.callback\n *\n */\nfunction Watcher(options) {\n  this.buffer = options.buffer || 150;\n  this.callback = options.callback;\n  this.watching = false;\n\n  this.listener = function(){\n    if (this.validate()) {\n      this.stop();\n      this.callback();\n    }\n  }.bind(this);\n}\n\n\nWatcher.prototype = {\n\n  /**\n   *\n   */\n  start : function() {\n    if (this.watching) return;\n\n    if (this.validate()) {\n      this.callback();\n    }\n    else {\n      this.watching = true;\n      window.addEventListener('scroll', this.listener);\n    }\n  },\n\n\n  /**\n   *\n   */\n  stop : function() {\n    window.removeEventListener('scroll', this.listener);\n    this.watching = false;\n  },\n\n\n  /**\n   * @returns {boolean}\n   */\n  validate : function() {\n    return window.innerHeight + window.pageYOffset >= document.body.scrollHeight - this.buffer;\n  }\n\n};\n\nreturn InfiniteScroll;\n}));\n"],"sourceRoot":"/source/"}